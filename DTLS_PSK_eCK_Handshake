theory DTLS_PSK_eCK_Handshake
begin

builtins: hashing, symmetric-encryption, asymmetric-encryption, signing,diffie-hellman

section{*DTLS DTLS_PSK_DY*}

functions: PRF/1,HMAC/1,LIST/1 [private],VH/2,VP/2

equations: 
	VH(HMAC(x.1,x.2,x.3),HMAC(x.1,x.2,x.3)) = true

equations: 
	VP(PRF(x.1,x.2,x.3),PRF(x.1,x.2,x.3)) = true

rule C_0:
	let
	   C = 'Client'
	   Cookie = '0'
	   Ver = 'DTLS1_2'
	in
	[Fr(~Nc),Fr(~Sid)]
	--[CookieG0(~Sid,Cookie)]->
	[Out(<$C,Ver,~Nc,~Sid,Cookie>),ST_C_0($C,Ver,~Nc,~Sid,Cookie)]

rule S_0:
    let
        S = 'Server'
    	Cookie = HMAC(~Ns,Nc,Sid)
    in
    [In(<$C,Ver,Nc,Sid,Cookie>),Fr(~Ns)]
    --[CookieG1(Sid,Cookie)]->
    [Out(<$S,Cookie>),ST_S_0($S,Ver,Nc,~Ns,Sid,~Ns,Cookie)]

rule C_1:
	[In(<$S,Cookie>), ST_C_0($C,Ver,Nc,Sid,Cookie)]
	--[CookieG2(Sid,Cookie)]->
	[Out(<$C,Ver,Nc,Sid,Cookie>),ST_C_1($C,Ver,Nc,Sid,Cookie)]

rule S_1:
	let 
	Psk_Hint = 'PskHint'
	in 
	[In(<$C,Ver,Nc,Sid,Cookie>),ST_S_0($S,Ver,Nc,Ns,Sid,Ns,Cookie)]
	--[
	   //Eq(VH(Cookie,HMAC(Ns,Nc,Sid)),true),
	     VH(Cookie,HMAC(Ns,Nc,Sid)),
       CookieV(Sid,Cookie),
       Honest($S)
	  ]->
	[Out(<$S,Ver,Ns,Sid,Psk_Hint>),ST_S_1($S,Ver,Nc,Ns,Sid,Psk_Hint)]

rule C_2:
	let 
	  Label = 'Finished'
	  Num = '0x01'
		Psk_Identity = 'PskIdentity'
		PSK = LIST(Psk_Hint,Psk_Identity)
		MK = PRF(PSK,'MasterScert',Nc,Ns)
		Verify_Data_C = PRF(MK, Label,h(Ver, Nc, Ns, Sid))
	in 
	[In(<$S,Ver,Ns,Sid,Psk_Hint>),ST_C_1($C,Ver,Nc,Sid,Cookie)]
	--[
	      MasterKey($S,$C,MK),
        Negotiate($C,$S,<Label,PSK,MK,Verify_Data_C>),
        Honest($C)

	  ]->
	[Out(<$C,Num,Label,Psk_Identity,Verify_Data_C>),!ST_PSK_L($C,PSK),!ST_MK_L($C,MK),
	!ST_C_2($C,Ver,Nc,Ns,Sid,Cookie,PSK,MK,Verify_Data_C)]

rule S_2:
	let 
		Label = 'Finished'
	  Num = '0x01'
		PSK = LIST(Psk_Identity,Psk_Hint)
		MK = PRF(PSK,'MasterScert',Nc,Ns)
		Verify_Data_S = PRF(MK,Label,h(Ver,Nc,Ns,Sid))
	in 
	[In(<$C,Num,Label,Psk_Identity,Verify_Data_C>),ST_S_1($S,Ver,Nc,Ns,Sid,Psk_Hint)]
	--[//Eq(VP(Verify_Data_C,Verify_Data_S),true),
	   VP(Verify_Data_C,Verify_Data_S),
	   MasterKey($S,$C,MK), 
	   Negotiate($S,$C,<Label,PSK,MK,Verify_Data_S>),
	   VerifyC(Verify_Data_C),
	   Sess(PSK,<'Server',$S,$C,Verify_Data_S>),
	   Match(PSK,<'Client',$C,$S,Verify_Data_C>),
	   Commit($S,$C,MK,PSK),
	   Honest($S)
	  ]->//verify
	[Out(<$S,Num,Label,Verify_Data_S>),!ST_PSK_L($S,PSK),!ST_MK_L($S,MK),!ST_S_2($S,Ver,Nc,Ns,Sid,Psk_Hint,PSK,MK,Verify_Data_S)]

rule C_3:
	[In(<$S,Num,Label,Verify_Data_S>),!ST_C_2($C,Ver,Nc,Ns,Sid,Cookie,PSK,MK,Verify_Data_C)]
	--[//Eq(VP(Verify_Data_S,Verify_Data_C),true),
	   VP(Verify_Data_S,Verify_Data_C),
	   SessionKey($S,$C,MK),
	   VerifyS(Verify_Data_S),
	   Commit($C,$S,MK,PSK),
	   Sess(PSK,<'Client',$C,$S,Verify_Data_C>),
	   Match(PSK,<'Server',$S,$C,Verify_Data_S>),
	   Run(PSK,$C,$S,MK),
	   Honest($C)
	  ]->//verify
	[]

rule RMK_reveal:
	[!ST_PSK_L(Q,PSK)] 
	--[PSKRev(Q)]-> 
	[Out(PSK)]


rule MK_reveal:
	[!ST_MK_L(Q,MK)] 
	--[MKRev(Q)]-> 
	[Out(MK)]
/*
restriction Eq_check_succeed:
 "
    All x y #i. Eq(x,y) @ i ==> x = y
 "
 */ 
restriction VH_check_succeed:
 "
    All x y #i. VH(x,y) @ i ==> x = y
 "
restriction VP_check_succeed:
 "
    All x y #i. VP(x,y) @ i ==> x = y
 "

lemma Cookie_Verify:
  "
    All v m sid1 #q #i.
      CookieV(sid1,m) @i & VH(m,v) @ q ==> //v = m
      //& 
      (Ex Data sid2 #j #k #l. CookieG0(sid2,Data) @j & CookieG1(sid2,Data) @k &
      CookieG2(sid2,Data) @l & (j < k & k < l) & (sid2 = sid1) & (Data=m))
      & (not (Ex A B C #r. Negotiate(A,B,C) @r))
  "
 
   
lemma Data_Verify:
	"
	  All v m #q #i. 
	     VerifyS(m) @i & VP(m,v) @ q ==> (v = m & q < i)
	  	 &
	  	 (Ex Data2 #j. VerifyC(Data2) @j & v = Data2 & j<i)
	  	 &
	  	 ((Ex A B MK #k. SessionKey(A,B,MK) @k & k < i)) 
	  	 & 
	  	 (not (Ex C #r. PSKRev(C) @r)) 
	  	 &
	  	 (not (Ex S #x. MKRev(S) @x)) 
	"
     
lemma DTLS_MK_secrecy:
  "
		All S C Test MK #i1 #i2. Run(Test,S,C,MK) @i1 & K(MK) @ i2 
			==>//
			  ((Ex #i3. PSKRev(S) @ i3) | (Ex #i3. PSKRev(C) @ i3))
			  |
			  ((Ex MachMessage md #i3 #i4. Sess(MachMessage,md) @i3 & Match(Test,md) @i4)
			  	& ((Ex #i5.PSKRev(S) @i5) | (Ex #i5. PSKRev(C) @i5)))
			  |
			  (Ex MachMessage md #i3 #i4. (Sess(MachMessage,md) @i3 & Match(Test,md) @i4)
			  	&(
			  	  (Ex #i5. MKRev(S) @i5)
			  	  	|
			  	  (Ex #i5. MKRev(C) @i5)
			  	  ))
			  |
			  (not (Ex MachMessage md #i3 #i4. (Sess(MachMessage,md) @i3 & Match(Test,md) @i4))
			  	&
			  	(
			  		(Ex #i5. MKRev(S) @i5)
			  	  |
			  	  (Ex #i5. MKRev(C) @i5)
			  		)
			  	)
  "

lemma DTLS_injective_agree:
  "
    All Role_A Role_B Key PSK #i.
    	((Commit(Role_A,Role_B,Key,PSK) @i) & (not (Ex #q. K(Key) @q)))
    	==>

          (Ex #j. Negotiate(Role_A,Role_B,Key) @j & j < i & not (K(Key) @j)
           & not (Ex Role_A2 Role_B2 #k. 
           		Commit(Role_A2,Role_B2,Key,PSK) @k & not (#i = #k)))
          & 
          not (Ex #j. PSKRev(Role_A) @j)
          & 
          not (Ex #j. PSKRev(Role_B) @j)
          & 
          not (Ex #j. MKRev(Role_A) @j) 
          & 
          not (Ex #j. MKRev(Role_B) @j)    
  "
  /*
lemma DTLS_injective_agree_eck:
	"
		All Role_A Role_B MK test #i. 
		  Commit(Role_A,Role_B,MK,test) @i. & K(MK)
		  ==>
		  		((Ex #i1. PSKRev(Role_A) @ i1) | (Ex #i1. PSKRev(Role_B) @ i1))
		  		| 
		  		(Ex #j. Negotiate(Role_A,Role_B,Key) @j & j < i
           & not (Ex Role_A2 Role_B2 #k. 
           		Commit(Role_A2,Role_B2,Key,test) @k & not (#i = #k)))
	"
*/

end
