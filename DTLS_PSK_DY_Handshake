theory DTLS_PSK_DY_Handshake
begin

builtins: hashing, symmetric-encryption, asymmetric-encryption, signing,diffie-hellman

section{*DTLS DTLS_PSK_DY*}

functions: PRF/1,HMAC/1,LIST/1 [private],VH/2,VP/2

equations: 
	VH(x.1,HMAC(x.2,x.3,x.4)) = true

equations: 
	VP(x.1,PRF(x.2,x.3,x.4)) = true

rule C_0:
	let
	   //C = 'Client'
	   Cookie = '0'
	   Ver = 'DTLS1_2'
	   Sid1 = 'o'
	in
	[Fr(~Nc),Fr(~Sid)]
	--[CookieG0(~Sid,Cookie),
		 
		 Honest($C)]->
	[Out(<$C,Ver,~Nc,~Sid,Cookie>),ST_C_0($C,Ver,~Nc,~Sid,Cookie)]

rule S_0:
    let
        //S = 'Server'
    	Cookie = HMAC(~Ns,Nc,Sid)
    in
    [In(<$C,Ver,Nc,Sid,Cookie>),Fr(~Ns)]
    --[CookieG1(Sid,Cookie),

       Honest($S)]->
    [Out(<$S,Cookie>),ST_S_0($S,Ver,Nc,~Ns,Sid,~Ns,Cookie)]

rule C_1:
	
		[In(<$S,Cookie>), ST_C_0($C,Ver,Nc,Sid,Cookie)]
		--[CookieG2(Sid,Cookie),
    	 Honest($C)]->
		[Out(<$C,Ver,Nc,Sid,Cookie>),ST_C_1($C,Ver,Nc,Sid,Cookie)]

rule S_1:
	let 
	S_hint = 'S_hint'
	in 
	[In(<$C,Ver,Nc,Sid,Cookie>),ST_S_0($S,Ver,Nc,Ns,Sid,Ns,Cookie)]
	--[
	     Eq(VH(Cookie,HMAC(Ns,Nc,Sid)),true),
       //VH(Cookie,HMAC(Ns,Nc,Sid)),
       CookieV(Sid,Cookie),
      
       
       Honest($S)
	  ]->
	[Out(<$S,Ver,Ns,Sid,S_hint>),ST_S_1($S,Ver,Nc,Ns,Sid,S_hint)]

rule C_2:
	let 
	    Label = 'Finished'
	    Num = '0x01'
		  C_identity = 'C_identity'
		  PSK = LIST(S_hint,C_identity)
		  MK = PRF(PSK,'MasterScert',Nc,Ns)
		  Verify_Data_C = PRF(MK, Label,h(Ver, Nc, Ns, Sid))
	in 
	[In(<$S,Ver,Ns,Sid,S_hint>),ST_C_1($C,Ver,Nc,Sid,Cookie)]
	--[
	    MasterKey($S,$C,MK),
      Negotiate($C,$S,<Label,PSK,MK,Verify_Data_C>),
      Origin(MK),
    	Sd($C,<Num,Label,C_identity,Verify_Data_C>),
	    
	    Honest($C)
	  ]->
	[Out(<$C,Num,Label,C_identity,Verify_Data_C>),
	ST_C_2($C,Ver,Nc,Ns,Sid,Cookie,PSK,MK,Verify_Data_C)]

rule S_2:
	let 
			Label = 'Finished'
	    Num = '0x01'
			PSK = LIST(C_identity,S_hint)
			MK = PRF(PSK,'MasterScert',Nc,Ns)
			Verify_Data_S = PRF(MK,Label,h(Ver,Nc,Ns,Sid))
	in 
	[In(<$C,Num,Label,C_identity,Verify_Data_C>),ST_S_1($S,Ver,Nc,Ns,Sid,S_hint)]
	--[Eq(VP(Verify_Data_C,Verify_Data_S),true),
	   //VP(Verify_Data_C,Verify_Data_S),
	   MasterKey($S,$C,MK), 
	   Negotiate($C,$S,<Label,PSK,MK,Verify_Data_S>),
	   VerifyC(Verify_Data_C),
	   Commit($C,$S,MK,PSK), 
	   Origin(MK),
     Sd($S,<Num,Label,Verify_Data_S>),
	   Trace($C,<Num,Label,C_identity,Verify_Data_C>),
	   Honest($S)
	  ]->//verify
	[Out(<$S,Num,Label,Verify_Data_S>)]

rule C_3:
	[In(<$S,Num,Label,Verify_Data_S>),ST_C_2($C,Ver,Nc,Ns,Sid,Cookie,PSK,MK,Verify_Data_C)]
	--[//Eq(VP(Verify_Data_C,Verify_Data_S),true),
	   VP(Verify_Data_C,Verify_Data_S),
	   SessionKey($S,$C,MK),
	   VerifyS(Verify_Data_S),
	   Commit($C,$S,MK,PSK), 
	   
	   Trace($S,<Num,Label,Verify_Data_S>),
	   Honest($C)
	  ]->//verify
	[]

restriction Eq_check_succeed:
 "
    All x y #i. Eq(x,y) @ i ==> x = y
 " 
 /*
restriction VH_check_succeed:
 "
    All x y #i. VH(x,y) @ i ==> x = y
 "
restriction VP_check_succeed:
 "
    All x y #i. VP(x,y) @ i ==> x = y
 "
 */
  /*
    All v m sid1 #q #i.
      CookieV(sid1,m) @i & VH(m,v) @ q ==> //v = m
      //& 
      (Ex Data sid2 #j #k #l. CookieG0(sid2,Data) @j & CookieG1(sid2,Data) @k &
      CookieG2(sid2,Data) @l & (j < k & k < l) & (sid2 = sid1) & (Data=m))
      & (not (Ex A B C #r. Negotiate(A,B,C) @r))
      */
//Cookie 验证前一定不存在实质上的会话协商，
lemma Dos_protection:
  "
  /*
    All A m #i. DosDefense(A,m) @i ==> 
      (Ex #j. Send(A,m) @j & Honest(A) @j & j<i)
   */
    All v m sid1 #q #i.
      CookieV(sid1,m) @i & Eq(m,v) @ q ==> v = m
      & 
      (Ex Data sid2 #j #k #l. CookieG0(sid2,Data) @j & CookieG1(sid2,Data) @k &
      CookieG2(sid2,Data) @l & (j < k & k < l) & (sid2 = sid1) & (Data=m))
      & (not (Ex A B C #r. Negotiate(A,B,C) @r))
  "
 //双方veridy_data验证后MK有效生成
  
lemma Data_Verify:
	"
	  All Data m v #i #q. 
	     VerifyS(Data) @i & VP(m,v) @ q ==> (v = m & q < i)
	  	 &
	  	 (Ex Data2 #j. VerifyC(Data2) @j & Data = Data2 & j<i)
	  	 ==>
	  	 not (Ex A B MK #k. SessionKey(A,B,MK) @k & k < i)
	"
     
lemma DTLS_MK_secrecy:
  "
  	not (
  		  Ex S C MK #i #j.
  		  	MasterKey(S,C,MK) @i & SessionKey(S,C,MK)@j
  		  	&
  		  	(Ex #k. K(MK) @k) 
  		)	
  "


lemma DTLS_injective_agree:
  "
    All Role_A Role_B Key PSK #i.
    	Commit(Role_A,Role_B,Key,PSK) @i 
    	==>
          Ex #j. MasterKey(Role_A,Role_B,Key) @j //& j < i
         & not (Ex Role_A2 Role_B2 #k. 
           		Commit(Role_A2,Role_B2,Key,PSK) @k & not (#i = #k))
  "



lemma DTLS_traceability:
	"
		All Role m  #i #j.
			Trace(Role,m) @i & Sd(Role,m)@j & j<i
			==> Ex mk. Origin(mk)@j 
	"
end
