theory DTLS_RPK_DY_Handshake
begin

builtins: hashing, symmetric-encryption, asymmetric-encryption, signing,diffie-hellman

section{*DTLS DTLS_RPK_DY*}

functions: PRF/1,HMAC/1,list/1 [private],renc/2,rdec/2,RPK/1,PK/1,SK/1,verifyr/3,verifyd/2,vp/2
equations://
  RPK(PK(x)) = x
  //(x^y)^z= x^(y*z)
  //SK(PK(x)) = sk,
  //PK(x) = pk(sk())
  
  //PK(x)*SK(PK(q)) = SK(PK(x))*PK(q)
equations:
  rdec(renc(<a,b>,SK(PK(y))),PK(y)) = a
  ,
  rdec(renc(<RPK(z),b>,SK(z)),z) = RPK(z)
  ,
  verifyr(renc(<a,b>,SK(PK(y))),a,PK(y)) = true
  ,
  verifyr(renc(<RPK(z),b>,SK(z)),RPK(z),z) = true
  ,
  verifyd(rdec(renc(<a,b>,SK(PK(y))),PK(y)),a) = true
  ,
  verifyd(rdec(renc(<RPK(z),b>,SK(z)),z),RPK(z)) = true
equations: 
  vp(a,PRF(x)) = true,
  vp(a,PRF(<x.1,x.2,x.3>)) = true

rule C_0:
    let
       C = 'Client'
       Ver = 'DTLS1_2'
    in
    [Fr(~Nc),Fr(~Sid),Fr(~CCT),Fr(~SCT)]
    --[Honest(C)]->
    [Out(<$C,Ver,~Nc,~Sid,~CCT,~SCT>),ST_C_0($C,Ver,~Nc,~Sid,~CCT,~SCT)]

rule S_0:
    let
      S = 'Server'
      RSPK = list(SCT)
      SPK =  PK(RSPK)
      SSK =  SK(SPK)  
      Ssig = renc(<RSPK,~Ns>,SSK)
    in
    [In(<$C,Ver,Nc,Sid,CCT,SCT>),Fr(~Ns)]
    --[Send($S,<CCT,Ssig,SPK>),
       Honest($S)]->
    [Out(<$S,Ver,Nc,~Ns,Sid,CCT,Ssig,SPK>),ST_S_0($S,Ver,Nc,~Ns,Sid,Ssig,RSPK,SPK,SSK)]

rule C_1:
    let 
      Label = 'Finished'
      Num = '0x01'
      RCPK = list(CCT)
      CPK = PK(RCPK)
      CSK = SK(CPK)
      PMK = 'g'^CSK^SPK
      MK = PRF(PMK,'MasterSecret',Nc,Ns)
      Verify_Data_C = PRF(MK,Label,h(Ver,Nc,Ns,Sid))
      Csig = renc(<RCPK,Nc>,CSK)
      EdcCsig = rdec(Ssig,SPK)
    in
    [In(<$S,Ver,Nc,Ns,Sid,CCT,Ssig,SPK>),ST_C_0($C,Ver,Nc,Sid,CCT,SCT)]
    --[
    Eq(verifyd(EdcCsig,RPK(SPK)),true),
    DosDefense($S,<CCT,Ssig,SPK>),
    MasterKey($S,$C,MK),
    Negotiate($C,$S,<Label,PMK,MK,Verify_Data_C>),
    Send($C,<Csig,CPK,Verify_Data_C>),
    Origin(MK),
    Sd($C,<Num,Label,CPK,Verify_Data_C>),
    Honest($C)
    //Eq(verifyr(Ssig,RPK(SPK),SPK),true),
    //verifyR(Ssig,RPK(SPK),SPK)
    ]->//
    [Out(<$C,Num,Label,Csig,CPK,Verify_Data_C>),ST_C_1($C,Ver,Nc,Sid,Csig,Verify_Data_C,PMK,MK,SPK,RCPK,CPK,CSK)]

rule S_1:
  let 
  Label = 'Finished'
  Num = '0x01'
  PMK = 'g'^SSK^CPK
  MK = PRF(PMK,'MasterSecret',Nc,Ns)
  Verify_Data_S = PRF(MK,Label,h(Ver,Nc,Ns,Sid))
  EdcSsig = rdec(Csig,CPK)
  in 
  [In(<$C,Num,Label,Csig,CPK,Verify_Data_C>),ST_S_0($S,Ver,Nc,Ns,Sid,Ssig,RSPK,SPK,SSK)]
  --[
       Eq(verifyd(EdcSsig,PRF(CPK)),true),
       //Eq(verifyr(Csig,RPK(CPK),CPK),true),
       Eq(vp(Verify_Data_C,Verify_Data_S),true),
       VerifyC(Verify_Data_C,Verify_Data_S),
       DosDefense($C,<Csig,CPK,Verify_Data_C>),
       MasterKey($S,$C,MK),
       Negotiate($C,$S,<Label,PMK,MK,Verify_Data_S>),
       Commit($C,$S,MK,PMK),
       Send($S,Verify_Data_S),
       Origin(MK),
       Sd($S,<Num,Label,Verify_Data_S>),
       Trace($C,<Num,Label,CPK,Verify_Data_C>),
       Honest($S)
    ]->
  [Out(<$S,Num,$Label,Verify_Data_S>)]
//!SRPK(S,RSPK,SPK,SSK) ,ST_S_1($S,Ver,Nc,Ns,Sid,Ssig,Verify_Data_S,PMK,MK,CPK)
rule C_2:
  [In(<$S,Num,Label,Verify_Data_S>),ST_C_1($C,Ver,Nc,Sid,Csig,Verify_Data_C,PMK,MK,SPK,RCPK,CPK,CSK)]
  --[
        Eq(vp(Verify_Data_S,Verify_Data_C),true),
        SessionKey($S,$C,MK),
        VerifyS(Verify_Data_S,Verify_Data_C),
        DosDefense($S,Verify_Data_S),
        Commit($C,$S,MK,PMK),
        Trace($S,<Num,Label,Verify_Data_S>),
        Honest($C)

    ]->
  []//!CRPK(C,RCPK,CPK,CSK)
/*
//
rule RMK_reveal:
  [!ST_PSK_L(Q,PSK)] 
  --[PSKRev(Q)]-> 
  [Out(PSK)]

//
rule MK_reveal:
  [!ST_MK_L(Q,MK)] 
  --[MKRev(Q)]-> 
  [Out(MK)]
  */

restriction Eq_check_succeed:
 "
    All x y #i. Eq(x,y) @ i ==> x = y
 "
 /*
 restriction VerifyS_check_succeed:
 "
    All x y #i. VerifyS(x,y) @ i ==> x = y
 "
  restriction VerifyC_check_succeed:
 "
    All x y #i. VerifyC(x,y) @ i ==> x = y
 "
 */
  // restriction SessionKey_check:
 //"
 //   All x y c #i. SessionKey(x,y,c) @ i ==> not(x = y)
 //"
/*
 restriction VerifyR_succeed:
 "
All x y z #i. verifyR(x,y,z) @ i ==> verifyR(x,y,z) = true @ i
 "
*/
/*
restriction VP_check_succeed:
 "
    All x y #i. VP(x,y) @ i ==> x = y
 "
 */
lemma Dos_protection: 
  "
    All A m #i. DosDefense(A,m) @i ==> 
      (Ex #j. Send(A,m) @j & Honest(A) @j & j<i)"
 //

lemma Data_Verify:
  "
    All m1 m2 a b #i #q. 
       VerifyS(m1,m2) @i & Eq(a,b) @q ==>(a = b)
       &
       (Ex Data1 Data2 #j. VerifyC(Data1,Data2) @j & Data2 = m1 & j<i)
       &
       ((Ex A B MK. SessionKey(A,B,MK) @i )) //& k < i
  "
  
lemma DTLS_MK_secrecy:
  "
    not (
        Ex S C MK #i #j.
          MasterKey(S,C,MK) @i & SessionKey(S,C,MK)@j
          &
          (Ex #k. K(MK) @k) 
      ) 
  "
 
lemma DTLS_injective_agree:
  "
    All Role_A Role_B Key PSK #i.
      Commit(Role_A,Role_B,Key,PSK) @i 
      ==>
          Ex #j. Negotiate(Role_A,Role_B,Key) @j & j < i
          & not (Ex Role_A2 Role_B2 #k. 
              Commit(Role_A2,Role_B2,Key,PSK) @k & not (#i = #k))
  "
 lemma DTLS_traceability:
  "
    All Role m  #i #j.
      Trace(Role,m) @i & Sd(Role,m)@j & j<i
      ==> Ex mk. Origin(mk)@j 
  " 
 
end
